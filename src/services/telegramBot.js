const TelegramBot = require('node-telegram-bot-api');
const prisma = require('../config/database');
const crypto = require('crypto');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  webhook: true,
  polling: false,
  cancellation: true
});

class TelegramBotService {
  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
   */
  async startBot() {
    try {
      const webhookUrl = `${process.env.APP_URL}/telegram-webhook`;
      await bot.setWebHook(webhookUrl);
      console.log('Telegram webhook set to:', webhookUrl);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
      await bot.setMyCommands([
        { command: '/start', description: '–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞' },
        { command: '/help', description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å' }
      ]);
    } catch (error) {
      console.error('Error setting webhook:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ webhook
   */
  async handleWebhook(req, res) {
    try {
      const { message } = req.body;
      console.log('Received webhook message:', message);

      if (message && message.from) {
        const { id: telegramId, username, first_name, last_name } = message.from;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUser = await prisma.user.findUnique({
          where: { telegramId: telegramId.toString() }
        });

        if (!existingUser) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await prisma.user.create({
            data: {
              telegramId: telegramId.toString(),
              username: username || '',
              firstName: first_name || '',
              lastName: last_name || '',
              totalXP: 0
            }
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await bot.sendMessage(
            telegramId,
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.'
          );
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await prisma.user.update({
            where: { telegramId: telegramId.toString() },
            data: {
              username: username || existingUser.username,
              firstName: first_name || existingUser.firstName,
              lastName: last_name || existingUser.lastName,
              updatedAt: new Date()
            }
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          await bot.sendMessage(
            telegramId,
            '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∂–¥—É—Ç –≤–∞—Å –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.'
          );
        }
      }

      res.sendStatus(200);
    } catch (error) {
      console.error('Error handling webhook:', error);
      res.sendStatus(500);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
   */
  async checkTelegramSignature(hash, data) {
    try {
      const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
      if (!BOT_TOKEN) {
        console.error('Bot token not configured');
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const dataCheckString = Object.keys(data)
        .sort()
        .filter(key => data[key] !== undefined)
        .map(key => `${key}=${data[key]}`)
        .join('\n');

      // –°–æ–∑–¥–∞–µ–º secret key –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
      const secretKey = crypto
        .createHash('sha256')
        .update(BOT_TOKEN)
        .digest();

      // –°–æ–∑–¥–∞–µ–º HMAC
      const hmac = crypto
        .createHmac('sha256', secretKey)
        .update(dataCheckString)
        .digest('hex');

      const isValid = hmac === hash;
      console.log('Signature check:', { isValid, receivedHash: hash, calculatedHash: hmac });
      
      return isValid;
    } catch (error) {
      console.error('Error checking Telegram signature:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotification(telegramId, message, options = {}) {
    try {
      const defaultOptions = {
        parse_mode: 'HTML',
        disable_web_page_preview: true
      };

      await bot.sendMessage(
        telegramId,
        message,
        { ...defaultOptions, ...options }
      );
      
      return true;
    } catch (error) {
      console.error('Error sending notification:', error.message);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserByTelegramId(telegramId) {
    try {
      return await prisma.user.findUnique({
        where: { telegramId: telegramId.toString() }
      });
    } catch (error) {
      console.error('Error getting user:', error);
      return null;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  async handleStartCommand(msg) {
    const chatId = msg.chat.id;
    try {
      const welcomeMessage = 
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n' +
        '–≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –∑–∞–¥–∞—á. ' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è:\n\n' +
        '‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n' +
        '‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n' +
        '‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!';

      const keyboard = {
        inline_keyboard: [
          [{
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: process.env.WEBAPP_URL }
          }]
        ]
      };

      await bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Error handling start command:', error);
      await this.sendNotification(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const telegramBotService = new TelegramBotService();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => telegramBotService.handleStartCommand(msg));

bot.onText(/\/help/, async (msg) => {
  await telegramBotService.sendNotification(
    msg.chat.id,
    '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"!'
  );
});

module.exports = telegramBotService;